# coding=utf-8
import tensorflow as tf
from tensorflow.contrib.layers import flatten
import numpy as np
from tensorflow.examples.tutorials.mnist import input_data
from sklearn.utils import shuffle

# 定义网络
def LeNet(input_tensor):
    w1_init = np.array([[[[-0.05769954, 0.04534382, 0.05010302, -0.05422013,
              -0.02898107, -0.05956011]],
            [[-0.08357429, -0.00280413, 0.09613901, 0.08939126,
              -0.10004556, 0.05309557]],
            [[0.08191059, -0.03742902, 0.08460057, 0.09571973,
              0.03948707, -0.11815561]],
            [[0.04234428, 0.00211937, -0.04196511, 0.00721911,
              -0.11104334, 0.03260177]],
            [[0.00763034, 0.00917352, 0.13399392, -0.08640127,
              -0.00685868, 0.00908068]]],
           [[[0.1204337, -0.08602843, -0.06958584, -0.0566872,
              -0.0426603, 0.15081549]],
            [[-0.04173195, 0.05309566, 0.10614454, 0.00582185,
              0.08097577, -0.17337081]],
            [[0.11318134, -0.02553711, -0.02185716, -0.04307624,
              0.05374528, -0.09262388]],
            [[0.05535144, -0.08386216, -0.21198243, 0.2126072,
              -0.04446977, -0.02153421]],
            [[0.05031956, 0.06773513, 0.04646066, 0.09354293,
              -0.05086966, -0.04065678]]],
           [[[-0.07425379, 0.00182734, -0.02996693, 0.0637527,
              -0.09711359, -0.1340707]],
            [[0.07406254, -0.02477862, -0.09339994, -0.07974804,
              -0.03631714, -0.14175947]],
            [[-0.05408427, -0.01001281, -0.03458659, -0.10367346,
              -0.07113256, -0.01312473]],
            [[0.05901467, -0.13854647, 0.01926683, 0.01356959,
              -0.02483653, 0.03861888]],
            [[0.07580717, -0.10171996, 0.08377949, 0.11982372,
              0.07301574, 0.17230816]]],
           [[[0.01689843, -0.07314702, 0.00580311, 0.15271506,
              0.10775599, 0.10681797]],
            [[0.05745113, 0.03122051, 0.1014123, -0.06007212,
              -0.10993855, -0.14982116]],
            [[-0.03061762, 0.0206752, 0.1021808, -0.05922889,
              0.09783853, -0.07748805]],
            [[0.0754816, 0.15530534, -0.06199032, 0.19417082,
              0.12064014, 0.00299919]],
            [[0.1561148, -0.10903467, 0.01629011, 0.06856423,
              -0.20124634, -0.05715561]]],
           [[[0.1094766, -0.04943591, -0.10689258, -0.01165231,
              -0.13005812, 0.05956601]],
            [[0.18135953, -0.06660637, -0.11543937, 0.14755839,
              -0.0546048, -0.09247048]],
            [[0.05761465, -0.12088009, 0.03812768, -0.06953685,
              0.00024598, 0.0214195]],
            [[-0.016915, 0.07036874, -0.04931999, -0.10811432,
              0.06369875, 0.0147655]],
            [[0.1577233, 0.09847082, -0.14792757, -0.11782695,
              -0.11853909, -0.09621804]]]], dtype=np.float32)

    fc3_w_init = np.array([[7.20090866e-02, -1.36011109e-01, 5.69491871e-02,
                            1.28353849e-01, -4.89648543e-02, 1.95179671e-01,
                            7.16188401e-02, 6.31444156e-02, -8.24353918e-02,
                            1.35314867e-01],
                           [1.66385487e-01, -8.77185687e-02, -2.22562253e-02,
                            1.71697214e-01, -1.08381342e-02, -6.76184595e-02,
                            -1.32208973e-01, -5.64841460e-03, 3.67969088e-02,
                            9.56887659e-03],
                           [2.95588356e-02, -3.29609364e-02, 5.14244437e-02,
                            6.64400309e-02, 1.14644460e-01, -4.20917496e-02,
                            7.32932016e-02, 1.66725606e-01, 7.67956302e-02,
                            5.04947007e-02],
                           [3.46591584e-02, -4.91712205e-02, 1.57689422e-01,
                            -7.95136765e-02, -4.85542715e-02, 6.09742366e-02,
                            -2.77202483e-02, -1.03301242e-01, 5.04872389e-02,
                            5.00588715e-02],
                           [-1.05367914e-01, 4.75493334e-02, 6.57971948e-02,
                            -1.38015851e-01, 1.06826961e-01, 9.40900967e-02,
                            1.10020697e-01, -3.84930335e-02, 1.05785549e-01,
                            1.31546587e-01],
                           [1.38875961e-01, -8.69837478e-02, -1.79484829e-01,
                            1.81204960e-01, 2.84031183e-02, -1.39233051e-02,
                            9.49683636e-02, -9.68567878e-02, 7.62462690e-02,
                            -1.42937554e-02],
                           [-5.14042266e-02, 9.65819210e-02, 1.64603796e-02,
                            -6.58887476e-02, 5.95085882e-02, 4.10756171e-02,
                            -1.06736913e-01, -4.81197201e-02, 7.40213245e-02,
                            1.16778441e-01],
                           [-3.41424160e-02, 1.23475127e-01, 4.09414480e-03,
                            -5.14739864e-02, -1.73135489e-01, 6.35826290e-02,
                            -2.65977718e-03, -7.47621506e-02, -1.96664974e-01,
                            -8.16379413e-02],
                           [1.07437581e-01, 8.01682174e-02, -1.78127676e-01,
                            -1.60213009e-01, 7.89058283e-02, 8.48447252e-03,
                            -4.54781801e-02, 5.93829551e-04, 1.12319857e-01,
                            9.94106531e-02],
                           [-1.49938604e-02, -4.51865159e-02, 3.97007577e-02,
                            -1.45087674e-01, 1.07231610e-01, -3.08784191e-02,
                            4.97930609e-02, 9.34979226e-03, 1.00245729e-01,
                            1.74497932e-01],
                           [-1.08683527e-01, -3.24181877e-02, 4.57402542e-02,
                            3.51403132e-02, 5.70205264e-02, 1.94948558e-02,
                            -1.65125325e-01, 3.99878435e-02, 4.70803455e-02,
                            1.12011164e-01],
                           [-3.15461420e-02, -1.78497300e-01, 4.12814170e-02,
                            7.86435157e-02, -1.36703730e-01, -1.06574543e-01,
                            8.02720189e-02, 1.13572352e-01, -6.70267120e-02,
                            -1.42215014e-01],
                           [-8.44970047e-02, 1.01222873e-01, 7.22921342e-02,
                            1.69137031e-01, -1.46252289e-01, -3.55399959e-02,
                            -1.05401479e-01, -1.52967945e-02, -3.58296931e-02,
                            3.64798047e-02],
                           [1.38257325e-01, -1.82499409e-01, 9.56355631e-02,
                            8.49865228e-02, -5.92577681e-02, 3.67089659e-02,
                            9.85693187e-02, -7.08360374e-02, 1.01675063e-01,
                            -1.33454278e-01],
                           [-4.89349186e-04, -3.73613164e-02, 7.82083422e-02,
                            6.76215515e-02, -7.49543011e-02, -7.01235235e-02,
                            -5.58116846e-02, -1.22812821e-03, -1.05914891e-01,
                            -1.78215623e-01],
                           [-9.23025310e-02, 2.19976082e-02, -8.65278393e-02,
                            8.48787650e-02, 1.10142052e-01, 1.78385936e-02,
                            -2.61980109e-02, 2.12914906e-02, 1.52437668e-03,
                            8.51659030e-02],
                           [4.44036052e-02, -5.06363884e-02, -4.76484075e-02,
                            3.30147929e-02, 1.36750489e-02, -3.80453542e-02,
                            -1.67322718e-02, 1.28181309e-01, -4.61051501e-02,
                            -1.87960804e-01],
                           [1.20078027e-01, 1.05552949e-01, -8.88049379e-02,
                            -2.48984993e-02, 1.47573337e-01, -7.21849576e-02,
                            -1.89347155e-02, 1.21596474e-02, -1.27423763e-01,
                            -4.80613261e-02],
                           [-9.93270278e-02, 1.63786132e-02, -1.96063563e-01,
                            1.83211610e-01, -9.96432919e-03, -1.04693919e-01,
                            1.97973102e-02, -1.44641757e-01, -1.05370522e-01,
                            1.81668371e-01],
                           [-1.36784598e-01, -1.37645423e-01, 3.89646441e-02,
                            4.41891467e-03, -2.37337477e-03, 2.03024186e-02,
                            6.52193055e-02, -3.00769489e-02, -2.55244467e-02,
                            9.21426937e-02],
                           [1.05608098e-01, -3.80834192e-02, 8.68936554e-02,
                            -4.11063097e-02, 6.86909109e-02, 1.77172329e-02,
                            -7.43159130e-02, -1.71166603e-02, -6.48940215e-03,
                            -1.76156927e-02],
                           [-4.12561707e-02, 6.37246370e-02, 1.19976453e-01,
                            -1.32341966e-01, -6.93134144e-02, -1.25750437e-01,
                            6.55061230e-02, 1.45033523e-01, 2.69743335e-02,
                            3.84016968e-02],
                           [4.37110327e-02, -7.12008551e-02, 6.00645728e-02,
                            -1.33660153e-01, 3.27392183e-02, -2.14507431e-02,
                            -5.61505742e-02, 4.37162146e-02, 3.12493872e-02,
                            1.05353251e-01],
                           [-9.38239023e-02, -1.00810073e-01, -8.35335180e-02,
                            3.33790965e-02, -8.94097611e-02, 3.54723148e-02,
                            -3.12960185e-02, 7.31302425e-02, 2.14044079e-02,
                            1.36354268e-01],
                           [-9.36773792e-02, 4.07957919e-02, 5.21014556e-02,
                            1.09119847e-01, -2.55098343e-02, 1.46222875e-01,
                            -6.45419434e-02, 5.76503687e-02, -3.50208171e-02,
                            -8.08536634e-02],
                           [-1.96889251e-01, 2.41896901e-02, -1.05962448e-01,
                            -2.29730513e-02, -1.17317177e-02, 1.05286472e-01,
                            9.14217606e-02, 2.61581577e-02, -8.35276023e-02,
                            -2.25270353e-02],
                           [-2.14429479e-02, -9.00549814e-02, 7.37052877e-03,
                            -1.11570179e-01, 2.34661233e-02, 1.85747240e-02,
                            1.06220432e-01, 6.21331036e-02, -1.09939434e-01,
                            -1.01128303e-01],
                           [1.98720745e-03, -1.70096871e-03, -1.56864569e-01,
                            9.04037878e-02, 7.69584402e-02, -1.74197137e-01,
                            -9.62872952e-02, 4.07431014e-02, -1.65368289e-01,
                            8.78560022e-02],
                           [-6.19660281e-02, -1.81392618e-02, 4.02395912e-02,
                            -2.47644959e-03, 1.98049173e-02, -2.42888201e-02,
                            5.27878478e-02, -1.85791299e-01, 5.72920702e-02,
                            1.21760093e-01],
                           [7.98736736e-02, 2.24669743e-02, -1.51495892e-03,
                            -1.72091164e-02, 1.07860677e-02, 5.29657565e-02,
                            8.73433650e-02, -7.98514411e-02, -6.23712465e-02,
                            -1.39869200e-02],
                           [1.51749915e-02, -1.25670642e-01, -3.16058546e-02,
                            -1.91492848e-02, -8.24487433e-02, 2.66555585e-02,
                            2.14332696e-02, -3.31042819e-02, 9.92387235e-02,
                            -4.32166494e-02],
                           [1.78427752e-02, -9.84506123e-03, 3.33394445e-02,
                            4.21669781e-02, 7.45259747e-02, -9.06346887e-02,
                            -8.06523710e-02, 6.98408186e-02, -3.34680453e-02,
                            -8.47725123e-02],
                           [-6.50026128e-02, -2.00784076e-02, 6.98824674e-02,
                            5.05462997e-02, -2.85492390e-02, -2.96658967e-02,
                            4.06783447e-02, -1.99373499e-01, -4.44388315e-02,
                            -1.85781762e-01],
                           [8.00947100e-02, -1.17041670e-01, -3.41456756e-02,
                            1.06766867e-02, -1.03523955e-01, 1.11076571e-01,
                            1.77808143e-02, 6.09962083e-02, 2.67907158e-02,
                            3.85797322e-02],
                           [-3.54255326e-02, -7.38018146e-03, -1.40850976e-01,
                            -6.34595379e-03, 1.77657604e-01, 4.15929928e-02,
                            2.26183645e-02, 1.76900312e-01, -2.52642334e-02,
                            2.34576911e-02],
                           [-8.32464918e-02, -1.19506419e-01, 5.86479008e-02,
                            -4.23773564e-02, 8.89724419e-02, 5.82650565e-02,
                            3.01863942e-02, -5.24554066e-02, -7.66861215e-02,
                            3.43964733e-02],
                           [2.91824657e-02, -2.71771867e-02, 9.09370277e-03,
                            1.01039231e-01, 6.94409907e-02, 6.99203312e-02,
                            -1.72382896e-03, -1.73990712e-01, 7.23438337e-02,
                            -1.51184708e-01],
                           [-1.10555189e-02, -9.05220732e-02, 3.04550733e-02,
                            -1.13646403e-01, 7.01520294e-02, 3.64035629e-02,
                            -6.04349859e-02, 7.26605281e-02, -4.48524170e-02,
                            1.82631448e-01],
                           [-3.80484872e-02, 2.02202573e-02, 3.48482542e-02,
                            1.58273891e-01, -6.82105869e-02, 1.00304954e-01,
                            7.23219886e-02, -1.91462427e-01, -4.58965153e-02,
                            9.72059295e-02],
                           [1.52018026e-01, -7.73977339e-02, -4.95987386e-03,
                            8.07319060e-02, 6.66493401e-02, 4.54357751e-02,
                            4.37807254e-02, 8.86531081e-03, 1.25714228e-01,
                            7.51546547e-02],
                           [1.15408942e-01, -7.37952143e-02, -3.39362696e-02,
                            1.15533784e-01, 1.14861522e-02, -4.16964386e-03,
                            -9.44672599e-02, 4.00461778e-02, 2.42576543e-02,
                            7.46492669e-02],
                           [-3.33600901e-02, -1.04930215e-01, -7.99943209e-02,
                            3.79035845e-02, -9.53346714e-02, -1.07340984e-01,
                            6.73441170e-03, -6.60759062e-02, -8.61464366e-02,
                            6.09931648e-02],
                           [-7.70956799e-02, -1.16886888e-02, 6.27605692e-02,
                            2.47677229e-02, -1.56801790e-01, -1.00152530e-01,
                            -2.21271068e-03, -8.98884386e-02, -1.44072309e-01,
                            -1.49034075e-02],
                           [1.41682466e-02, 5.75252548e-02, 7.41501227e-02,
                            9.98177305e-02, -3.78150051e-03, 3.24168913e-02,
                            2.84251873e-03, 3.47273774e-03, 1.04077011e-02,
                            8.45049471e-02],
                           [1.69870198e-01, -3.60096358e-02, -6.61822259e-02,
                            -3.37730907e-03, 1.92283139e-01, 1.15665123e-01,
                            4.82600145e-02, 1.27040586e-02, 1.63295701e-01,
                            6.94823787e-02],
                           [4.71467432e-03, 1.31593466e-01, -7.08692297e-02,
                            6.89244792e-02, -1.49158295e-02, -6.14141785e-02,
                            -1.33060396e-01, 9.83591452e-02, -1.28921330e-01,
                            -2.13145334e-02],
                           [-1.00607201e-02, -3.02854981e-02, 5.68324253e-02,
                            9.95979179e-03, 8.96060094e-02, 6.93626627e-02,
                            -1.22114748e-01, 1.28689453e-01, -7.48438463e-02,
                            1.13911398e-01],
                           [1.20694574e-03, -1.24042250e-01, 3.17703583e-03,
                            -2.07381770e-02, -3.56102549e-02, -1.26716316e-01,
                            5.70944548e-02, 1.05120830e-01, 1.20369598e-01,
                            1.01664513e-01],
                           [-7.75318667e-02, 9.70930010e-02, -1.76316835e-02,
                            7.42076337e-02, 6.54945672e-02, -3.75597738e-02,
                            1.71311736e-01, -4.21444178e-02, -6.54456541e-02,
                            8.65883902e-02],
                           [-6.20608926e-02, -5.07472381e-02, -6.87303580e-03,
                            -8.11752006e-02, -1.97823063e-01, 3.64213772e-02,
                            2.12037489e-02, 1.17122598e-01, 6.80562556e-02,
                            -2.98754442e-02],
                           [1.14303464e-02, -1.90306276e-01, 5.13304770e-02,
                            -9.91883278e-02, -3.80889140e-02, -4.69991378e-02,
                            -2.27854215e-03, 6.93196431e-02, -2.19451766e-02,
                            -7.35024586e-02],
                           [-2.11936701e-02, 5.03449403e-02, 7.47661386e-03,
                            6.83535486e-02, -8.69066920e-04, -1.02809191e-01,
                            -6.31722361e-02, 1.22993588e-01, 1.00787058e-01,
                            -3.53679620e-02],
                           [-5.25147021e-02, -1.08217664e-01, 3.27398516e-02,
                            5.90978563e-02, -1.18655629e-01, 1.00326300e-01,
                            6.09692037e-02, -1.64497383e-02, 6.42236695e-02,
                            -4.36442293e-04],
                           [1.43264458e-01, -8.91110823e-02, -4.74266447e-02,
                            -5.83894067e-02, -1.96795147e-02, 1.01385951e-01,
                            1.31969422e-01, -8.85185692e-03, -1.26166165e-01,
                            1.40532479e-01],
                           [1.16082929e-01, -1.34528071e-01, -7.44474679e-02,
                            -1.59428284e-01, 1.77495658e-01, 5.26336245e-02,
                            2.33971059e-01, -9.10801515e-02, -4.64569516e-02,
                            -4.62529622e-02],
                           [-1.70469861e-02, 1.50691703e-01, -1.09109983e-01,
                            2.68060118e-02, -6.85488712e-03, -1.78993970e-01,
                            1.62681103e-01, -1.53248636e-02, 5.85776344e-02,
                            -6.10175021e-02],
                           [1.22950576e-01, 6.48326660e-03, 1.89686358e-01,
                            1.27329662e-01, -9.46072415e-02, -1.16997622e-01,
                            -6.03766404e-02, -2.13202252e-03, -5.65632188e-04,
                            -7.57193044e-02],
                           [-7.21167773e-02, -1.60644338e-01, -1.58490762e-01,
                            -5.45192361e-02, 1.72731623e-01, 5.57928979e-02,
                            1.26702860e-01, 9.49589685e-02, 1.30791470e-01,
                            1.89345665e-02],
                           [1.40389606e-01, -1.57727879e-02, 1.44881427e-01,
                            -8.47508088e-02, -6.70317709e-02, 9.69037861e-02,
                            -6.77665994e-02, 4.10025977e-02, 6.51065335e-02,
                            -1.50899142e-01],
                           [5.64876646e-02, -2.95458324e-02, 1.76714927e-01,
                            7.64190555e-02, -8.41190070e-02, 4.32249121e-02,
                            8.38842094e-02, -8.38777497e-02, -4.14306037e-02,
                            -1.68538570e-01],
                           [6.85020909e-02, 9.49499682e-02, 4.66120467e-02,
                            1.15791529e-01, 3.06804962e-02, -1.48909792e-01,
                            1.38832539e-01, 2.34960709e-02, 1.15726262e-01,
                            6.08221740e-02],
                           [1.06454968e-01, -6.77024275e-02, 6.82930201e-02,
                            2.03592014e-02, -1.19509570e-01, -8.67064670e-02,
                            8.43667313e-02, -3.75172533e-02, -7.97104239e-02,
                            -9.66615006e-02],
                           [-1.08159659e-02, 1.29674315e-01, 6.77054673e-02,
                            -2.91936249e-02, -1.50270969e-01, 4.11505252e-02,
                            4.25019599e-02, -2.95886546e-02, -3.14171873e-02,
                            5.80512732e-03],
                           [-5.25399894e-02, -7.48553053e-02, -1.49813220e-01,
                            -1.24801069e-01, -1.25044659e-01, 3.01419701e-02,
                            2.23323219e-02, -6.82536438e-02, 8.84063244e-02,
                            6.58163521e-03],
                           [4.89410423e-02, 1.34853289e-01, 2.65480969e-02,
                            1.70642957e-01, -3.97350937e-02, -1.84164830e-02,
                            1.04518630e-01, -5.17500751e-02, 9.84103456e-02,
                            -1.02305964e-01],
                           [-2.73267571e-02, 1.04156315e-01, 1.81206372e-02,
                            1.97961777e-01, 1.09734938e-01, -1.39380498e-02,
                            3.17784064e-02, -9.87397954e-02, -1.25948563e-01,
                            8.33412334e-02],
                           [-1.13909647e-01, 4.51830477e-02, 8.42368677e-02,
                            -1.19510777e-01, -7.26001859e-02, -2.54388042e-02,
                            -4.84573469e-02, -8.69101882e-02, 7.55149648e-02,
                            1.12220690e-01],
                           [4.85646762e-02, -1.21467300e-01, 1.74176067e-01,
                            -1.46585837e-01, 1.00307167e-01, -2.05994137e-02,
                            2.71666460e-02, 1.26505077e-01, 2.65087858e-02,
                            -1.35891773e-02],
                           [-1.70152094e-02, -9.87500995e-02, 5.00177033e-03,
                            1.59092337e-01, 1.59952745e-01, -5.51457033e-02,
                            4.35630605e-02, 1.47269726e-01, 5.69825061e-02,
                            4.15397026e-02],
                           [7.66481385e-02, -1.27617577e-02, 1.79012775e-01,
                            -1.43488929e-01, 1.61968499e-01, 4.28026095e-02,
                            9.05976817e-03, -6.84912503e-02, 5.47482818e-02,
                            3.43658291e-02],
                           [-6.43892214e-02, 3.04366145e-02, -7.12031079e-03,
                            -1.75498556e-02, 1.08208638e-02, -3.20604555e-02,
                            5.86537225e-03, -5.93916550e-02, 1.25022605e-01,
                            -1.17722884e-01],
                           [1.38081107e-02, -1.90470535e-02, -2.37103384e-02,
                            7.21019134e-02, -2.49259006e-02, 1.67508256e-02,
                            3.46858911e-02, -8.39899331e-02, 1.41418353e-02,
                            -8.02357271e-02],
                           [-2.32473593e-02, 9.51224938e-05, 1.25496322e-02,
                            -1.41408622e-01, -1.33918561e-02, 4.14376780e-02,
                            -2.20954120e-02, 4.86953110e-02, -8.67180713e-03,
                            1.96787645e-03],
                           [-2.34727561e-02, 2.00301521e-02, -3.19986641e-02,
                            -5.65278381e-02, 2.93363333e-02, 4.70895618e-02,
                            7.67583996e-02, 7.32398480e-02, -1.40505895e-01,
                            -1.32278711e-01],
                           [-1.29481122e-01, -1.18128704e-02, 1.11135014e-03,
                            1.19182885e-01, -4.72811721e-02, -7.75241479e-03,
                            3.04464735e-02, 2.38419715e-02, 1.16821460e-01,
                            -1.26948044e-01],
                           [-2.92693563e-02, 1.48093877e-02, 9.78916511e-02,
                            -9.28648710e-02, 9.54669155e-03, -3.64468619e-02,
                            -1.20497786e-01, -1.45531341e-01, -3.41023020e-02,
                            -9.42060351e-02],
                           [1.86581593e-02, -4.54328656e-02, 1.14545502e-01,
                            9.21132509e-04, 4.12567332e-02, 1.45774305e-01,
                            1.39117673e-01, -1.35680139e-01, -6.76126182e-02,
                            -1.05730258e-01],
                           [8.38857889e-02, 7.51389414e-02, 7.39312619e-02,
                            4.24429327e-02, -1.08216397e-01, 5.52301221e-02,
                            4.02187183e-02, -3.83622129e-03, -5.90074956e-02,
                            1.11583665e-01],
                           [-4.89825010e-02, 1.73445538e-01, 6.34125387e-03,
                            -4.12254669e-02, -2.22202670e-02, 7.53617808e-02,
                            1.50432602e-01, -7.63838068e-02, -7.78910890e-02,
                            1.18372060e-01],
                           [1.46089133e-03, -4.45180647e-02, -1.41568230e-02,
                            3.66072520e-03, 7.10761920e-02, -1.79676469e-02,
                            1.57082811e-01, 1.18729487e-01, 2.77598184e-02,
                            7.45337456e-02],
                           [2.10524872e-02, 7.35216290e-02, -1.31880745e-01,
                            8.90673045e-03, -8.10796954e-03, 6.98028132e-02,
                            -6.80687279e-02, -5.23620360e-02, -7.35493526e-02,
                            3.16188782e-02],
                           [-4.05980386e-02, -1.12137496e-01, -9.61995777e-03,
                            -5.36215305e-02, -6.38066977e-02, 1.06931590e-01,
                            2.19231043e-02, -1.45110533e-01, -7.56414747e-03,
                            3.78134437e-02],
                           [5.23904450e-02, -6.99923839e-03, 1.26678020e-01,
                            2.06428487e-02, -7.35110641e-02, -1.64092451e-01,
                            1.99271664e-02, -1.68095484e-01, -9.95482551e-04,
                            1.23477586e-01],
                           [-1.15506485e-01, 1.12512268e-01, -4.58971635e-02,
                            8.08486938e-02, 1.03519484e-02, -6.80135041e-02,
                            2.62382273e-02, 1.14833653e-01, -2.02716589e-01,
                            -1.03500053e-01]], dtype=np.float32)

    # C1  conv  Input=32*32*1, Output=28*28*6
    conv1_w = tf.Variable(name='conv1_w',initial_value=w1_init)
    conv1_b = tf.Variable(tf.zeros(6))
    conv1 = tf.add(tf.nn.conv2d(input_tensor, conv1_w, strides=[1, 1, 1, 1], padding='VALID'),conv1_b)
    conv1 = tf.nn.relu(conv1,name='conv1_out')
    #tf.add_to_collection('conv1_out', conv1)

    # S2 Pooling Input=28*28*6 Output=14*14*6
    pool_1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')

    # C3 conv Input=14*14*6 Output=10*10*6
    conv2_w = tf.Variable(tf.truncated_normal(shape=[5, 5, 6, 16], mean=0, stddev=0.1),name='conv2_w')
    conv2_b = tf.Variable(tf.zeros(16))
    conv2 = tf.nn.conv2d(pool_1, conv2_w, strides=[1, 1, 1, 1], padding='VALID')+conv2_b
    conv2 = tf.nn.relu(conv2)

    # S4 Pooling Input=10*10*6 OutPut=5*5*16
    pool_2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')

    # Flatten Input=5*5*16 Output=400
    fc1 = flatten(pool_2)

    # C5 conv Input=5*5*16=400 Output=120
    fc1_w = tf.Variable(tf.truncated_normal(shape=(400, 120), mean=0, stddev=0.1),name='fc1_w')
    fc1_b = tf.Variable(tf.zeros(120))
    fc1 = tf.matmul(fc1, fc1_w) + fc1_b

    # F6 Input=120 OutPut=84
    fc2_w = tf.Variable(tf.truncated_normal(shape=(120, 84), mean=0, stddev=0.1),name='fc2_w')
    fc2_b = tf.Variable(tf.zeros(84))
    fc2 = tf.matmul(fc1, fc2_w)+fc2_b
    fc2 = tf.nn.relu(fc2)

    # F7 Input=84  Output=10
    fc3_w = tf.Variable(initial_value=fc3_w_init,name='fc3_w')
    fc3_b = tf.Variable(tf.zeros(10))
    logits = tf.matmul(fc2, fc3_w) + fc3_b
    out = {'logits': logits, 'conv1_out': conv1,'test':fc1_w}
    return out

# 参数
BATCH_SIZE = 128
EPOCHS = 10
RATE = 0.1


def printImage(image):
    for i in range(28):
        for j in range(28):
            if image[i][j] == 0 :
                print(' ',end='')
            else:
                print('*',end='')
        print('')

def train(mnist):
    x_train, y_train = mnist.train.images, mnist.train.labels
    x_validation, y_validation = mnist.validation.images, mnist.validation.labels
    printImage(x_train[0])
    # print(x_train[0].shape)
    x_train = np.pad(x_train, ((0, 0), (2, 2), (2, 2), (0, 0)),'constant')
    x_validation = np.pad(x_validation, ((0, 0), (2, 2), (2, 2), (0, 0)),'constant')
    # print(x_train[0].shape)


    x = tf.placeholder(tf.float32, shape=[None, 32, 32, 1])
    y = tf.placeholder(tf.int32, shape=[None, ])
    one_hot_y = tf.one_hot(y, 10)

    Net = LeNet(x)
    y_ = Net['logits']
    cross_entropy = tf.nn.softmax_cross_entropy_with_logits_v2(labels=one_hot_y, logits=y_)
    cross_entropy_mean = tf.reduce_mean(cross_entropy)
    train_step = tf.train.GradientDescentOptimizer(RATE).minimize(cross_entropy_mean)

    correct_prediction = tf.equal(tf.argmax(y_, 1), tf.argmax(one_hot_y, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))


    with tf.Session() as session:
        session.run(tf.global_variables_initializer())
        for i in range(EPOCHS):
            x_train, y_train = shuffle(x_train, y_train)
            for offset in range(0, 1, BATCH_SIZE):
            #for offset in range(0, len(x_train),BATCH_SIZE):
                end = offset + BATCH_SIZE
                batch_x, batch_y = x_train[offset:end], y_train[offset:end]
                _,p = session.run([train_step,Net], feed_dict={x:batch_x, y:batch_y})
                print(p['test'])
                #np.set_printoptions(threshold=np.inf)
                #print(batch_x)
                #print(p['conv1_out'])
                #print('WB1->', session.run(tf.trainable_variables('conv1_out')))
                #print(session.run(tf.get_collection('conv1_out')))
                #feature = graph.get_operation_by_name("h_pool_flat").outputs[0]
            #print("EPOCHS:", i+1)
            #accuracy_score = session.run(accuracy, feed_dict={x:x_validation, y:y_validation})
            #print('Validation Accuracy', accuracy_score)
        # test
        x_test, y_test = mnist.test.images, mnist.test.labels
        x_test = np.pad(x_test, ((0, 0), (2, 2), (2, 2), (0, 0)),'constant')
        test_accuracy = session.run(accuracy, feed_dict={x:x_test, y:y_test})
        print('Test Accuracy', test_accuracy) # test_accuracy = 0.9876


def main(argv=None):
    mnist =input_data.read_data_sets("data/mnist/", reshape=False)
    train(mnist)

if __name__ == '__main__':
	tf.app.run()